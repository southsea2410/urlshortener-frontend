/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyurlsImport } from './routes/myurls'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const PasswordprotectedIndexLazyImport = createFileRoute(
  '/password_protected/',
)()

// Create/Update Routes

const MyurlsRoute = MyurlsImport.update({
  path: '/myurls',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PasswordprotectedIndexLazyRoute = PasswordprotectedIndexLazyImport.update(
  {
    path: '/password_protected/',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/password_protected/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/myurls': {
      id: '/myurls'
      path: '/myurls'
      fullPath: '/myurls'
      preLoaderRoute: typeof MyurlsImport
      parentRoute: typeof rootRoute
    }
    '/password_protected/': {
      id: '/password_protected/'
      path: '/password_protected'
      fullPath: '/password_protected'
      preLoaderRoute: typeof PasswordprotectedIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/myurls': typeof MyurlsRoute
  '/password_protected': typeof PasswordprotectedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/myurls': typeof MyurlsRoute
  '/password_protected': typeof PasswordprotectedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/myurls': typeof MyurlsRoute
  '/password_protected/': typeof PasswordprotectedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/myurls' | '/password_protected'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/myurls' | '/password_protected'
  id: '__root__' | '/' | '/myurls' | '/password_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MyurlsRoute: typeof MyurlsRoute
  PasswordprotectedIndexLazyRoute: typeof PasswordprotectedIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MyurlsRoute: MyurlsRoute,
  PasswordprotectedIndexLazyRoute: PasswordprotectedIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/myurls",
        "/password_protected/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/myurls": {
      "filePath": "myurls.tsx"
    },
    "/password_protected/": {
      "filePath": "password_protected/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
