/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyurlsImport } from './routes/myurls'
import { Route as AllurlsImport } from './routes/allurls'
import { Route as IndexImport } from './routes/index'
import { Route as AnalyticsAliasImport } from './routes/analytics.$alias'

// Create Virtual Routes

const PasswordProtectedLazyImport = createFileRoute('/password-protected')()

// Create/Update Routes

const PasswordProtectedLazyRoute = PasswordProtectedLazyImport.update({
  path: '/password-protected',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/password-protected.lazy').then((d) => d.Route),
)

const MyurlsRoute = MyurlsImport.update({
  path: '/myurls',
  getParentRoute: () => rootRoute,
} as any)

const AllurlsRoute = AllurlsImport.update({
  path: '/allurls',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsAliasRoute = AnalyticsAliasImport.update({
  path: '/analytics/$alias',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/allurls': {
      id: '/allurls'
      path: '/allurls'
      fullPath: '/allurls'
      preLoaderRoute: typeof AllurlsImport
      parentRoute: typeof rootRoute
    }
    '/myurls': {
      id: '/myurls'
      path: '/myurls'
      fullPath: '/myurls'
      preLoaderRoute: typeof MyurlsImport
      parentRoute: typeof rootRoute
    }
    '/password-protected': {
      id: '/password-protected'
      path: '/password-protected'
      fullPath: '/password-protected'
      preLoaderRoute: typeof PasswordProtectedLazyImport
      parentRoute: typeof rootRoute
    }
    '/analytics/$alias': {
      id: '/analytics/$alias'
      path: '/analytics/$alias'
      fullPath: '/analytics/$alias'
      preLoaderRoute: typeof AnalyticsAliasImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/allurls': typeof AllurlsRoute
  '/myurls': typeof MyurlsRoute
  '/password-protected': typeof PasswordProtectedLazyRoute
  '/analytics/$alias': typeof AnalyticsAliasRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/allurls': typeof AllurlsRoute
  '/myurls': typeof MyurlsRoute
  '/password-protected': typeof PasswordProtectedLazyRoute
  '/analytics/$alias': typeof AnalyticsAliasRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/allurls': typeof AllurlsRoute
  '/myurls': typeof MyurlsRoute
  '/password-protected': typeof PasswordProtectedLazyRoute
  '/analytics/$alias': typeof AnalyticsAliasRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/allurls'
    | '/myurls'
    | '/password-protected'
    | '/analytics/$alias'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/allurls' | '/myurls' | '/password-protected' | '/analytics/$alias'
  id:
    | '__root__'
    | '/'
    | '/allurls'
    | '/myurls'
    | '/password-protected'
    | '/analytics/$alias'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllurlsRoute: typeof AllurlsRoute
  MyurlsRoute: typeof MyurlsRoute
  PasswordProtectedLazyRoute: typeof PasswordProtectedLazyRoute
  AnalyticsAliasRoute: typeof AnalyticsAliasRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllurlsRoute: AllurlsRoute,
  MyurlsRoute: MyurlsRoute,
  PasswordProtectedLazyRoute: PasswordProtectedLazyRoute,
  AnalyticsAliasRoute: AnalyticsAliasRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/allurls",
        "/myurls",
        "/password-protected",
        "/analytics/$alias"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/allurls": {
      "filePath": "allurls.tsx"
    },
    "/myurls": {
      "filePath": "myurls.tsx"
    },
    "/password-protected": {
      "filePath": "password-protected.lazy.tsx"
    },
    "/analytics/$alias": {
      "filePath": "analytics.$alias.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
